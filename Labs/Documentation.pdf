https://github.com/denistvein1/lftc

A hash table is a practical and efficient data structure for managing symbols in a
compiler's symbol table, offering fast and reliable lookup, insertion, and scalability
to accommodate the needs of various programming languages and source code complexities.

The SymTable has as attributes the size and the HashTable.
It also has a method "put" that adds a key in the SymTable
if the key doesn't exist and returns the position of the key,
if the key already exists, it only returns the position.

The Data Structure used for PIF is the Python build in list
that stores a tuple consisting of: token name and position/-1.

The regex used for the identifiers is: “\b[a-zA-Z][a-zA-Z0-9]*\b”.
It matches any sequences that start with a letter (any case)
and is followed by letters or digits of indefinite length. The \b is used to
make sure that only strings of this pattern are matched, and not just if parts of
it match the regex. The * expresses the fact that  elements in the list can appear
multiple times or not at all.

The regex used for the integer constants is: “\b[-]?[1-9][0-9]*\b|\b0\b”. It matches 0
or any sequence of single digits (1-9) or multiple digits that must start with a
non zero digit. The sign is optional and only - is used. The \b is used to make
sure that only strings of this pattern are matched, and not just if parts of it match the regex.

The data structure used for the transition function is a dictionary that
has tuples of (state, input symbol) as keys and the next state as the value.

<state> ::= a | b | c
<digit> ::= 0 | 1
<tuple> ::= (<state>, <digit>)
<rule1> ::= <state>
<rule2> ::= <state> = <state>
<grammar> ::= <rule1> | <rule2>

<rule1> ::= a
          | b
          | c

<rule2> ::= (a, 0) = b
          | (b, 1) = c
          | (c, 1) = c

The Grammar class represents a context-free grammar(CFG) and provides methods to work with
grammatical rules and productions.

Fields:
-nonterminals -> a list to store nonterminal symbols in the grammar
-terminals -> list to store terminal symbols in the grammar
-productions -> dictionary where keys are nonterminals and values are lists of production rules
associated with each nonterminal
-start -> starting symbol for the grammar
Methods:

__init__(self, path: str) -> The constructor method that initializes the grammar using a JSON
file specified by the path. The JSON file is expected to contain keys 'NonTerminals',
'Terminals', 'Productions' and 'Start'.
    -Reads nonterminals, terminals, productions and start symbol from the JSON file.
    -Prints nonterminals, terminals, start symbol and calls getProductions() to print the
        productions.

isCFG(self) -> bool: Checks if the grammar adheres to the definition of a Context-Free Grammar
(CFG). Verifies that the starting symbol is in the set of productions and that all left-hand
and right-hand sides of productions meet CFG criteria.

getProductions(self) -> None: Prints all productions in a readable format.
